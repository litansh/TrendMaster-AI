apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.name }}
  namespace: istio-system
  labels:
    app: {{ .Values.app.name }}
    version: {{ .Values.app.version }}
    managed-by: helm
spec:
  replicas: {{ .Values.deployment.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.app.name }}
  strategy:
    type: {{ .Values.deployment.strategy.type }}
    {{- if eq .Values.deployment.strategy.type "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{ .Values.deployment.strategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.deployment.strategy.rollingUpdate.maxUnavailable }}
    {{- end }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}
        version: {{ .Values.app.version }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      securityContext:
        runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
      containers:
      - name: {{ .Values.app.name }}
        image: {{ .Values.global.image_repo }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["python", "scripts/main.py"]
        env:
        - name: KALTURA_ENV
          value: {{ .Values.environment.name | quote }}
        - name: PROMETHEUS_URL
          value: {{ .Values.environment.prometheus_url | quote }}
        - name: DRY_RUN
          value: {{ .Values.environment.dry_run | quote }}
        - name: LOG_LEVEL
          value: {{ .Values.environment.log_level | quote }}
        - name: KUBECONFIG
          value: "/var/run/secrets/kubernetes.io/serviceaccount"
        - name: CONFIGMAP_NAME
          value: {{ .Values.rateLimit.configMapName | quote }}
        - name: CONFIGMAP_NAMESPACE
          value: {{ .Values.rateLimit.namespace | quote }}
        resources:
          requests:
            memory: {{ .Values.deployment.resources.requests.memory }}
            cpu: {{ .Values.deployment.resources.requests.cpu }}
          limits:
            memory: {{ .Values.deployment.resources.limits.memory }}
            cpu: {{ .Values.deployment.resources.limits.cpu }}
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: output
          mountPath: /app/output
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - "import sys; sys.exit(0)"
          initialDelaySeconds: 30
          periodSeconds: 60
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - python
            - -c
            - "import sys; sys.exit(0)"
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
      volumes:
      - name: config
        configMap:
          name: {{ .Values.configMap.name }}
      - name: output
        emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}